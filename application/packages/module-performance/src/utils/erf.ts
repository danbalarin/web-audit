// erf(x): error function (see: https://en.wikipedia.org/wiki/Error_function)
// by https://github.com/jeremybarnes/cephes/blob/master/cprob/ndtr.c

const P = [
	2.46196981473530512524e-10, 5.64189564831068821977e-1, 7.46321056442269912687,
	4.86371970985681366614e1, 1.96520832956077098242e2, 5.26445194995477358631e2,
	9.3452852717195760754e2, 1.02755188689515710272e3, 5.57535335369399327526e2,
];
const Q = [
	1.32281951154744992508e1, 8.67072140885989742329e1, 3.54937778887819891062e2,
	9.75708501743205489753e2, 1.82390916687909736289e3, 2.24633760818710981792e3,
	1.65666309194161350182e3, 5.57535340817727675546e2,
];
const R = [
	5.64189583547755073984e-1, 1.27536670759978104416, 5.01905042251180477414,
	6.16021097993053585195, 7.4097426995044893916, 2.9788666537210024067,
];
const S = [
	2.2605286322011727659, 9.39603524938001434673, 1.20489539808096656605e1,
	1.70814450747565897222e1, 9.60896809063285878198, 3.3690764510008151605,
];
const T = [
	9.60497373987051638749, 9.00260197203842689217e1, 2.23200534594684319226e3,
	7.00332514112805075473e3, 5.55923013010394962768e4,
];
const U = [
	3.35617141647503099647e1, 5.21357949780152679795e2, 4.59432382970980127987e3,
	2.26290000613890934246e4, 4.92673942608635921086e4,
];
function polevl(x: number, c: number[]) {
	return c.reduce((r, c) => r * x + c, 0);
}
function p1evl(x: number, c: number[]) {
	return c.reduce((r, c) => r * x + c, 1);
}

export function erf(x: number) {
	if (Math.abs(x) > 1) return 1 - erfc(x);
	const z = x * x;
	return (x * polevl(z, T)) / p1evl(z, U);
}
// erfc(x) = 1 - erf(x)
const MAXLOG = Math.log(Number.MAX_VALUE);
function erfc(x0: number): number {
	const x = Math.abs(x0);
	if (x < 1) return 1 - erf(x);
	const z = -x0 * x0;
	if (z < -MAXLOG) return x0 < 0 ? 2 : 0;
	const [p, q] = x < 8 ? [P, Q] : [R, S];
	const y = (Math.exp(z) * polevl(x, p)) / p1evl(x, q);
	return x0 < 0 ? 2 - y : y;
}
